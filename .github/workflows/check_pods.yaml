name: Kubernetes Pod Status Monitor with Slack Alerts

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'  # Запускать каждый час для постоянного мониторинга

jobs:
  monitor-pods:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Ограничение времени выполнения
    
    env:
      BASTION_IP: "178.124.206.53"
      BASTION_USER: "jump_sa"
      BASTION_PORT: "32510"
      HOST1_IP: "192.168.208.17"
      HOST2_IP: "192.168.203.9"
      REMOTE_USER: "root"
      KUBECTL_CMD: "kubectl get pods -A --field-selector=status.phase!=Running --no-headers"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Настройка SSH
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure SSH environment
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Генерация конфига для SSH с Jump Host
          cat > ~/.ssh/config <<EOF
          Host bastion
            HostName ${{ env.BASTION_IP }}
            User ${{ env.BASTION_USER }}
            Port ${{ env.BASTION_PORT }}
            IdentityFile ~/.ssh/id_ed25519
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null

          Host cluster1
            HostName ${{ env.HOST1_IP }}
            User ${{ env.REMOTE_USER }}
            ProxyJump bastion
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null

          Host cluster2
            HostName ${{ env.HOST2_IP }}
            User ${{ env.REMOTE_USER }}
            ProxyJump bastion
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
          EOF

          # Запись SSH ключа
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      # Проверка подключения к кластерам
      - name: Test SSH connections
        run: |
          echo "Testing connection to Cluster 1..."
          ssh cluster1 "echo 'Successfully connected to Cluster 1'"
          
          echo "Testing connection to Cluster 2..."
          ssh cluster2 "echo 'Successfully connected to Cluster 2'"

      # Проверка подов в каждом кластере
      - name: Check Cluster 1 pods status
        id: cluster1_check
        run: |
          echo "Checking pods in Cluster 1..."
          ssh cluster1 "${{ env.KUBECTL_CMD }}" > non_running_pods_cluster1.txt || echo "No non-running pods found" > non_running_pods_cluster1.txt
          
          if [ -s non_running_pods_cluster1.txt ]; then
            echo "cluster1_has_issues=true" >> $GITHUB_OUTPUT
            echo "Found non-running pods in Cluster 1"
            cat non_running_pods_cluster1.txt
          else
            echo "cluster1_has_issues=false" >> $GITHUB_OUTPUT
            echo "All pods in Cluster 1 are running normally"
          fi

      - name: Check Cluster 2 pods status
        id: cluster2_check
        run: |
          echo "Checking pods in Cluster 2..."
          ssh cluster2 "${{ env.KUBECTL_CMD }}" > non_running_pods_cluster2.txt || echo "No non-running pods found" > non_running_pods_cluster2.txt
          
          if [ -s non_running_pods_cluster2.txt ]; then
            echo "cluster2_has_issues=true" >> $GITHUB_OUTPUT
            echo "Found non-running pods in Cluster 2"
            cat non_running_pods_cluster2.txt
          else
            echo "cluster2_has_issues=false" >> $GITHUB_OUTPUT
            echo "All pods in Cluster 2 are running normally"
          fi

      # Отправка уведомлений в Slack
      - name: Send Slack notifications
        if: steps.cluster1_check.outputs.cluster1_has_issues == 'true' || steps.cluster2_check.outputs.cluster2_has_issues == 'true'
        run: |
          # Формирование сообщения
          MESSAGE=":kubernetes: *Kubernetes Pod Status Report* :warning:\n"
          MESSAGE+="*Execution time:* $(date -u)\n\n"
          
          if [ "${{ steps.cluster1_check.outputs.cluster1_has_issues }}" == "true" ]; then
            CLUSTER1_ISSUES=$(cat non_running_pods_cluster1.txt | sed 's/"/\\"/g' | awk '{printf "%s\\n", $0}')
            MESSAGE+="*:red_circle: Cluster 1 (${{ env.HOST1_IP }}) issues:*\n"
            MESSAGE+="\`\`\`$CLUSTER1_ISSUES\`\`\`\n"
          else
            MESSAGE+="*:green_circle: Cluster 1 (${{ env.HOST1_IP }}) - All pods healthy*\n"
          fi
          
          if [ "${{ steps.cluster2_check.outputs.cluster2_has_issues }}" == "true" ]; then
            CLUSTER2_ISSUES=$(cat non_running_pods_cluster2.txt | sed 's/"/\\"/g' | awk '{printf "%s\\n", $0}')
            MESSAGE+="*:red_circle: Cluster 2 (${{ env.HOST2_IP }}) issues:*\n"
            MESSAGE+="\`\`\`$CLUSTER2_ISSUES\`\`\`"
          else
            MESSAGE+="*:green_circle: Cluster 2 (${{ env.HOST2_IP }}) - All pods healthy*"
          fi
          
          # Отправка в Slack
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$MESSAGE\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      # Сохранение результатов как артефактов
      - name: Upload results as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pod-status-reports
          path: |
            non_running_pods_cluster1.txt
            non_running_pods_cluster2.txt
          retention-days: 7 

name: Check Kubernetes pods with SSH key setup

on:
  workflow_dispatch:

jobs:
  deploy-and-check:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Настройка SSH
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Шаг 2: Создаем конфигурацию SSH
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

          cat <<EOF > ~/.ssh/config
          Host bastion
            Hostname 178.124.206.53
            User jump_sa
            Port 32510
            IdentityFile ~/.ssh/id_ed25519

          Host remote-host-1
            Hostname 192.168.208.17
            User root
            Port 22
            ProxyJump bastion
            IdentityFile ~/.ssh/id_ed25519

          Host remote-host-2
            Hostname 192.168.203.9
            User root
            Port 22
            ProxyJump bastion
            IdentityFile ~/.ssh/id_ed25519
          EOF

      # Шаг 3: Добавляем ключ на целевые хосты
      - name: Add SSH key to target hosts
        run: |
          # Генерируем публичный ключ из приватного
          PUB_KEY=$(ssh-keygen -y -f ~/.ssh/id_ed25519)

          # Функция для добавления ключа на хост
          add_key_to_host() {
            host=$1
            echo "Adding key to $host..."
            ssh -o StrictHostKeyChecking=no $host \
              "mkdir -p ~/.ssh && \
              echo '$PUB_KEY' >> ~/.ssh/authorized_keys && \
              chmod 700 ~/.ssh && \
              chmod 600 ~/.ssh/authorized_keys && \
              echo 'Key added successfully to $host'"
          }

          # Добавляем ключ на оба хоста
          add_key_to_host remote-host-1
          add_key_to_host remote-host-2

      # Шаг 4: Проверяем подключение
      - name: Test SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no remote-host-1 'echo "Successfully connected to host 1"'
          ssh -o StrictHostKeyChecking=no remote-host-2 'echo "Successfully connected to host 2"'

      # Шаг 5: Проверяем поды (оригинальная логика)
      - name: Check pods on host 1
        run: |
          ssh remote-host-1 'kubectl get pods -A' > pods_output_1.txt
          
          echo "=== Pods on host 1 ==="
          cat pods_output_1.txt
          
          awk '$4 != "Running" && NR > 1' pods_output_1.txt > not_running_1.txt || true
          
          if [ -s not_running_1.txt ]; then
            TEXT=$(sed 's/"/\\"/g' not_running_1.txt | awk '{printf "%s\\n", $0}')
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"*Problem pods on host 1:*\n\`\`\`$TEXT\`\`\`\"}" \
              ${{ secrets.SLACK_WEBHOOK }}
          fi

      - name: Check pods on host 2
        run: |
          ssh remote-host-2 'kubectl get pods -A' > pods_output_2.txt
          
          echo "=== Pods on host 2 ==="
          cat pods_output_2.txt
          
          awk '$4 != "Running" && NR > 1' pods_output_2.txt > not_running_2.txt || true
          
          if [ -s not_running_2.txt ]; then
            TEXT=$(sed 's/"/\\"/g' not_running_2.txt | awk '{printf "%s\\n", $0}')
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"*Problem pods on host 2:*\n\`\`\`$TEXT\`\`\`\"}" \
              ${{ secrets.SLACK_WEBHOOK }}
          fi

      # Шаг 6: Сохраняем результаты
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: pod-status-reports
          path: |
            pods_output_1.txt
            not_running_1.txt
            pods_output_2.txt
            not_running_2.txt

name: Kubernetes Cluster Monitoring

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'  # Every hour

env:
  BASTION_IP: "178.124.206.53"
  BASTION_USER: "jump_sa"
  BASTION_PORT: "32510"
  CLUSTER1_IP: "192.168.208.17"
  CLUSTER2_IP: "192.168.203.9"
  DEFAULT_USER: "root"
  KUBECTL_CMD: "kubectl get pods -A --field-selector=status.phase!=Running --no-headers"

jobs:
  cluster-monitoring:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure SSH environment
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Write private key
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          
          # Create SSH config
          cat > ~/.ssh/config <<EOF
          Host bastion
            HostName ${{ env.BASTION_IP }}
            User ${{ env.BASTION_USER }}
            Port ${{ env.BASTION_PORT }}
            IdentityFile ~/.ssh/id_ed25519
            StrictHostKeyChecking no
            ConnectTimeout 10

          Host cluster1
            HostName ${{ env.CLUSTER1_IP }}
            User ${{ env.DEFAULT_USER }}
            ProxyJump bastion
            StrictHostKeyChecking no
            ConnectTimeout 10

          Host cluster2
            HostName ${{ env.CLUSTER2_IP }}
            User ${{ env.DEFAULT_USER }}
            ProxyJump bastion
            StrictHostKeyChecking no
            ConnectTimeout 10
          EOF

          # Add hosts to known_hosts
          ssh-keyscan -p ${{ env.BASTION_PORT }} ${{ env.BASTION_IP }} >> ~/.ssh/known_hosts
          ssh-keyscan -p 22 ${{ env.CLUSTER1_IP }} >> ~/.ssh/known_hosts
          ssh-keyscan -p 22 ${{ env.CLUSTER2_IP }} >> ~/.ssh/known_hosts

      - name: Test SSH connections
        run: |
          echo "Testing connection to Cluster 1..."
          if ! ssh -T cluster1 "echo 'Connection to Cluster 1 successful'"; then
            echo "##[error]Failed to connect to Cluster 1"
            exit 1
          fi
          
          echo "Testing connection to Cluster 2..."
          if ! ssh -T cluster2 "echo 'Connection to Cluster 2 successful'"; then
            echo "##[warning]Failed to connect to Cluster 2"
          fi

      - name: Check Cluster 1 status
        id: cluster1_check
        run: |
          echo "##[group]Checking Cluster 1 pods"
          OUTPUT=$(ssh cluster1 "${{ env.KUBECTL_CMD }}" 2>&1 || true)
          
          if [[ $OUTPUT == *"Permission denied"* ]]; then
            echo "##[error]Authentication failed for Cluster 1"
            echo "has_issues=true" >> $GITHUB_OUTPUT
            echo "error_type=auth_failure" >> $GITHUB_OUTPUT
            echo "error_message=SSH authentication failed for Cluster 1" >> $GITHUB_OUTPUT
          elif [[ -n $OUTPUT ]]; then
            echo "##[error]Problem pods found in Cluster 1"
            echo "$OUTPUT" > cluster1_issues.txt
            echo "has_issues=true" >> $GITHUB_OUTPUT
            echo "error_type=pod_issues" >> $GITHUB_OUTPUT
            PODS_INFO=$(echo "$OUTPUT" | awk '{printf "%-40s %-20s %-10s\n", $1"/"$2, $3, $4}')
            echo "pods_info<<EOF" >> $GITHUB_OUTPUT
            echo "$PODS_INFO" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "##[section]All pods in Cluster 1 are healthy"
            echo "has_issues=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Cluster 1 output:"
          echo "$OUTPUT"
          echo "##[endgroup]"

      - name: Check Cluster 2 status
        id: cluster2_check
        run: |
          echo "##[group]Checking Cluster 2 pods"
          OUTPUT=$(ssh cluster2 "${{ env.KUBECTL_CMD }}" 2>&1 || true)
          
          if [[ $OUTPUT == *"Permission denied"* ]]; then
            echo "##[error]Authentication failed for Cluster 2"
            echo "has_issues=true" >> $GITHUB_OUTPUT
            echo "error_type=auth_failure" >> $GITHUB_OUTPUT
            echo "error_message=SSH authentication failed for Cluster 2" >> $GITHUB_OUTPUT
          elif [[ -n $OUTPUT ]]; then
            echo "##[error]Problem pods found in Cluster 2"
            echo "$OUTPUT" > cluster2_issues.txt
            echo "has_issues=true" >> $GITHUB_OUTPUT
            echo "error_type=pod_issues" >> $GITHUB_OUTPUT
            PODS_INFO=$(echo "$OUTPUT" | awk '{printf "%-40s %-20s %-10s\n", $1"/"$2, $3, $4}')
            echo "pods_info<<EOF" >> $GITHUB_OUTPUT
            echo "$PODS_INFO" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "##[section]All pods in Cluster 2 are healthy"
            echo "has_issues=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Cluster 2 output:"
          echo "$OUTPUT"
          echo "##[endgroup]"

      - name: Send Slack notification
        if: steps.cluster1_check.outputs.has_issues == 'true' || steps.cluster2_check.outputs.has_issues == 'true'
        run: |
          SLACK_MESSAGE=":kubernetes: *Kubernetes Cluster Status Report* :rotating_light:\n"
          SLACK_MESSAGE+="*Execution Time:* $(date -u '+%Y-%m-%d %H:%M:%S UTC')\n\n"
          
          # Cluster 1 status
          SLACK_MESSAGE+="*Cluster 1 (${{ env.CLUSTER1_IP }})*: "
          if [ "${{ steps.cluster1_check.outputs.error_type }}" == "auth_failure" ]; then
            SLACK_MESSAGE+=":x: *Authentication Failed*\n"
            SLACK_MESSAGE+="> ${{ steps.cluster1_check.outputs.error_message }}\n"
          elif [ "${{ steps.cluster1_check.outputs.has_issues }}" == "true" ]; then
            SLACK_MESSAGE+=":warning: *Problem Pods Detected*\n"
            SLACK_MESSAGE+="\`\`\`Namespace/Pod Name                       Status         Restarts\n"
            SLACK_MESSAGE+="${{ steps.cluster1_check.outputs.pods_info }}\`\`\`\n"
          else
            SLACK_MESSAGE+=":white_check_mark: *All Pods Healthy*\n"
          fi
          
          # Cluster 2 status
          SLACK_MESSAGE+="\n*Cluster 2 (${{ env.CLUSTER2_IP }})*: "
          if [ "${{ steps.cluster2_check.outputs.error_type }}" == "auth_failure" ]; then
            SLACK_MESSAGE+=":x: *Authentication Failed*\n"
            SLACK_MESSAGE+="> ${{ steps.cluster2_check.outputs.error_message }}\n"
          elif [ "${{ steps.cluster2_check.outputs.has_issues }}" == "true" ]; then
            SLACK_MESSAGE+=":warning: *Problem Pods Detected*\n"
            SLACK_MESSAGE+="\`\`\`Namespace/Pod Name                       Status         Restarts\n"
            SLACK_MESSAGE+="${{ steps.cluster2_check.outputs.pods_info }}\`\`\`\n"
          else
            SLACK_MESSAGE+=":white_check_mark: *All Pods Healthy*\n"
          fi
          
          # Add workflow info
          SLACK_MESSAGE+="\n*Workflow Information:*\n"
          SLACK_MESSAGE+="Repository: $GITHUB_REPOSITORY\n"
          SLACK_MESSAGE+="Workflow: $GITHUB_WORKFLOW\n"
          SLACK_MESSAGE+="Run: https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          
          echo "Sending Slack notification..."
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$SLACK_MESSAGE\"}" \
            "${{ secrets.SLACK_WEBHOOK_URL }}"

      - name: Upload debug artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cluster-debug-info
          path: |
            cluster1_issues.txt
            cluster2_issues.txt
          retention-days: 3 
